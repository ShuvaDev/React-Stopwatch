{"version":3,"sources":["stopwatch/title/title.js","stopwatch/countdown/digit/digit.js","stopwatch/countdown/countdown.js","stopwatch/controller/controller.js","stopwatch/laps/laps.js","stopwatch/app.jsx","serviceWorker.js","index.js"],"names":["Title","state","title","isInput","editHandler","setState","inputChange","event","target","value","keyPressHandler","key","blurHandler","output","this","className","type","onKeyPress","onBlur","onChange","onClick","src","width","alt","React","Component","Digit","props","style","color","CountDown","time","min","sec","mili","Controller","start","pause","lap","reset","startHandler","pauseHandler","lapHandler","resetHandler","getController","Laps","laps","map","index","App","intervalId","getStart","setInterval","getPause","clearInterval","getLap","getReset","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8OA8CeA,G,kNA1CXC,MAAQ,CACJC,MAAO,kBACPC,SAAS,G,EAEbC,YAAc,WACV,EAAKC,SAAS,CAACF,SAAS,K,EAE5BG,YAAc,SAAAC,GACV,EAAKF,SAAS,CAACH,MAAOK,EAAMC,OAAOC,S,EAEvCC,gBAAkB,SAAAH,GACG,UAAdA,EAAMI,KACL,EAAKN,SAAS,CAACF,SAAS,K,EAGhCS,YAAc,WACV,EAAKP,SAAS,CAACF,SAAS,K,uDAGxB,IAAIU,EAAS,KAeb,OAbIA,EADDC,KAAKb,MAAME,QACD,yBAAKY,UAAU,SACpB,2BAAOC,KAAK,OAAOC,WAAYH,KAAKJ,gBAAiBQ,OAAQJ,KAAKF,YAAaO,SAAUL,KAAKR,YAAaS,UAAU,eAAeN,MAAOK,KAAKb,MAAMC,SAItJ,yBAAKa,UAAU,gBACX,wBAAIA,UAAU,aAAaD,KAAKb,MAAMC,OACtC,0BAAMkB,QAASN,KAAKV,YAAaW,UAAU,qBACvC,yBAAKM,IAAI,WAAWC,MAAM,OAAOC,IAAI,WAMjD,6BACKV,O,GArCGW,IAAMC,YCQXC,G,MARD,SAACC,GACX,OACI,yBAAKZ,UAAU,aAAaa,MAAO,CAACC,MAAOF,EAAME,QAC7C,wBAAId,UAAU,kBAAkBY,EAAMlB,MAAQ,GAAd,WAAuBkB,EAAMlB,OAAQkB,EAAMlB,UCOxEqB,EAVG,SAACH,GACf,OACI,yBAAKZ,UAAU,eACX,kBAAC,EAAD,CAAOc,MAAM,YAAYpB,MAAOkB,EAAMI,KAAKC,MAC3C,kBAAC,EAAD,CAAOH,MAAM,UAAUpB,MAAOkB,EAAMI,KAAKE,MACzC,kBAAC,EAAD,CAAOJ,MAAM,SAASpB,MAAOkB,EAAMI,KAAKG,SCkFrCC,E,4MAvFXlC,MAAQ,CACJmC,OAAO,EACPC,OAAO,EACPC,KAAK,EACLC,OAAO,G,EAEXC,aAAe,WACX,EAAKnC,SAAS,CACV+B,OAAO,EACPC,OAAO,EACPC,KAAK,IACN,WACC,EAAKX,MAAMS,Y,EAGnBK,aAAe,WACX,EAAKpC,SAAS,CACV+B,OAAO,EACPC,OAAO,EACPC,KAAK,EACLC,OAAO,IAER,WACC,EAAKZ,MAAMU,Y,EAGnBK,WAAa,WACT,EAAKf,MAAMW,O,EAEfK,aAAe,WACX,EAAKtC,SAAS,CACVkC,OAAO,EACPH,OAAO,EACPC,OAAO,EACPC,KAAK,IACN,WACC,EAAKX,MAAMY,Y,EAGnBK,cAAgB,WACZ,IAAI/B,EAAS,KAoCb,OAnCG,EAAKZ,MAAMmC,QAAU,EAAKnC,MAAMsC,MAC/B1B,EAAS,6BACL,4BACIO,QAAS,EAAKoB,aACdzB,UAAU,oCAFd,WAMG,EAAKd,MAAMmC,OAAS,EAAKnC,MAAMoC,OAAS,EAAKpC,MAAMqC,IAC1DzB,EAAS,6BACL,4BACIO,QAAS,EAAKqB,aACd1B,UAAU,oCAFd,SAKA,4BACIK,QAAS,EAAKsB,WACd3B,UAAU,oCAFd,QAME,EAAKd,MAAMmC,OAAS,EAAKnC,MAAMsC,QACrC1B,EAAS,6BACL,4BACIO,QAAS,EAAKoB,aACdzB,UAAU,oCAFd,SAKA,4BACIK,QAAS,EAAKuB,aACd5B,UAAU,mCAFd,WAODF,G,uDAGP,OACI,yBAAKE,UAAU,kBACVD,KAAK8B,qB,GAlFGnB,aCqBVoB,EArBF,SAAClB,GACV,OACI,wBAAIZ,UAAU,+BACTY,EAAMmB,KAAKC,KAAI,SAACT,EAAKU,GAClB,OACI,wBAAIrC,IAAKqC,EAAOjC,UAAU,6BACtB,4BACI,0BAAMA,UAAU,aAAhB,YACA,0BAAMA,UAAU,eAAeuB,EAAIN,KACnC,0BAAMjB,UAAU,aAAhB,aACA,0BAAMA,UAAU,eAAeuB,EAAIL,KACnC,0BAAMlB,UAAU,aAAhB,WACA,0BAAMA,UAAU,eAAeuB,EAAIJ,aC2DhDe,E,4MAjEXC,WAAa,K,EACbjD,MAAQ,CACJ8B,KAAM,CACFC,IAAK,EACLC,IAAK,EACLC,KAAM,GAEVY,KAAM,I,EAEVK,SAAW,WACP,EAAKD,WAAaE,aAAY,WAC1B,IAAIpB,EAAM,EAAK/B,MAAM8B,KAAKC,IACtBC,EAAM,EAAKhC,MAAM8B,KAAKE,IACtBC,EAAO,EAAKjC,MAAM8B,KAAKG,KACxBA,GAAQ,KACPD,GAAY,EACZC,EAAO,GAERD,GAAO,KACND,GAAY,EACZC,EAAM,GAEV,EAAK5B,SAAS,CAAC0B,KAAM,CAACC,MAAKC,MAAKC,KAAMA,EAAO,OAC9C,M,EAEPmB,SAAW,WACPC,cAAc,EAAKJ,a,EAEvBK,OAAS,WACL,IAAIxB,EAAI,eACD,EAAK9B,MAAM8B,MAElB,EAAK1B,SAAS,CAACyC,KAAK,CAAEf,GAAH,mBAAY,EAAK9B,MAAM6C,U,EAE9CU,SAAW,WACP,EAAKnD,SAAS,CACV0B,KAAM,CACFC,IAAK,EACLC,IAAK,EACLC,KAAM,GAEVY,KAAM,M,uDAIV,OACI,yBAAK/B,UAAU,8BACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,wBACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWgB,KAAMjB,KAAKb,MAAM8B,OAC5B,kBAAC,EAAD,CACIK,MAAOtB,KAAKqC,SACZd,MAAOvB,KAAKuC,SACZd,MAAOzB,KAAK0C,SACZlB,IAAKxB,KAAKyC,SAEd,kBAAC,EAAD,CAAMT,KAAMhC,KAAKb,MAAM6C,c,GA1D7BrB,aCKEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD6H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.cc5e6a84.chunk.js","sourcesContent":["import React from 'react'\r\nimport './title.css'\r\n\r\nclass Title extends React.Component {\r\n    state = {\r\n        title: 'REACT STOPWATCH',\r\n        isInput: false\r\n    }\r\n    editHandler = () => {\r\n        this.setState({isInput: true})\r\n    }\r\n    inputChange = event => {\r\n        this.setState({title: event.target.value})\r\n    }\r\n    keyPressHandler = event => {\r\n        if(event.key === 'Enter') {\r\n            this.setState({isInput: false})\r\n        }\r\n    }\r\n    blurHandler = () => {\r\n        this.setState({isInput: false})\r\n    }\r\n    render() {\r\n        let output = null\r\n        if(this.state.isInput) {\r\n            output = <div className='Title'>\r\n                <input type='text' onKeyPress={this.keyPressHandler} onBlur={this.blurHandler} onChange={this.inputChange} className='form-control' value={this.state.title} />\r\n            </div>\r\n        } else {\r\n            output = (\r\n                <div className='d-flex Title'>\r\n                    <h1 className='display-4'>{this.state.title}</h1>\r\n                    <span onClick={this.editHandler} className='edit-icon ml-auto'>\r\n                        <img src=\"icon.png\" width='40px' alt=\"icon\"/>\r\n                    </span>\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n            <div>\r\n                {output}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Title","import React from 'react'\r\nimport './digit.css'\r\n\r\nconst Digit = (props) => {\r\n    return (\r\n        <div className='Digit mx-3' style={{color: props.color}}>\r\n            <h1 className='display-2 py-3'>{props.value < 10 ? `0${props.value}`:props.value}</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Digit","import React from 'react'\r\nimport Digit from './digit/digit'\r\n\r\nconst CountDown = (props) => {\r\n    return (\r\n        <div className='d-flex my-4'>\r\n            <Digit color='palegreen' value={props.time.min}/>\r\n            <Digit color='skyblue' value={props.time.sec}/>\r\n            <Digit color='salmon' value={props.time.mili}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CountDown","import React, {Component} from 'react'\r\n\r\nclass Controller extends Component {\r\n    state = {\r\n        start: true,\r\n        pause: false,\r\n        lap: false,\r\n        reset: false\r\n    }\r\n    startHandler = () => {\r\n        this.setState({\r\n            start: false,\r\n            pause: true,\r\n            lap: true\r\n        }, () => {\r\n            this.props.start()\r\n        })\r\n    }\r\n    pauseHandler = () => {\r\n        this.setState({\r\n            start: true,\r\n            pause: false,\r\n            lap: false,\r\n            reset: true\r\n\r\n        }, () => {\r\n            this.props.pause()\r\n        })\r\n    }\r\n    lapHandler = () => {\r\n        this.props.lap()\r\n    }\r\n    resetHandler = () => {\r\n        this.setState({\r\n            reset: false,\r\n            start: true,\r\n            pause: false,\r\n            lap: false\r\n        }, () => {\r\n            this.props.reset()\r\n        })\r\n    }\r\n    getController = () => {\r\n        let output = null\r\n        if(this.state.start && !this.state.reset) {\r\n            output = <div>\r\n                <button \r\n                    onClick={this.startHandler}\r\n                    className='btn btn-success btn-lg px-5 ml-5'\r\n                    >Start\r\n                </button>\r\n            </div>\r\n        } else if(!this.state.start && this.state.pause && this.state.lap) {\r\n            output = <div>\r\n                <button \r\n                    onClick={this.pauseHandler}\r\n                    className='btn btn-primary btn-lg px-5 ml-5'\r\n                    >Pause\r\n                </button>\r\n                <button \r\n                    onClick={this.lapHandler}\r\n                    className='btn btn-warning btn-lg px-5 ml-5'\r\n                    >Lap\r\n                </button>\r\n            </div>\r\n        } else if(this.state.start && this.state.reset) {\r\n            output = <div>\r\n                <button \r\n                    onClick={this.startHandler}\r\n                    className='btn btn-success btn-lg px-5 ml-5'\r\n                    >Start\r\n                </button>\r\n                <button \r\n                    onClick={this.resetHandler}\r\n                    className='btn btn-danger btn-lg px-5 ml-5'\r\n                    >Reset\r\n                </button>\r\n            </div>\r\n        }\r\n        return output\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='text-left my-5'>\r\n                {this.getController()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Controller","import React from 'react'\r\n\r\nconst Laps = (props) => {\r\n    return (\r\n        <ul className='list-group list-group-flush'>\r\n            {props.laps.map((lap, index) => {\r\n                return (\r\n                    <li key={index} className='list-group-item text-left'>\r\n                        <h4>\r\n                            <span className='text-dark'>Minute: </span>\r\n                            <span className='text-danger'>{lap.min}</span>\r\n                            <span className='text-dark'> Second: </span>\r\n                            <span className='text-danger'>{lap.sec}</span>\r\n                            <span className='text-dark'> Mili: </span>\r\n                            <span className='text-danger'>{lap.mili}</span>\r\n                        </h4>\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Laps","import React, {Component} from 'react'\r\n\r\nimport Title from './title/title'\r\nimport CountDown from './countdown/countdown'\r\nimport Controller from './controller/controller'\r\nimport Laps from './laps/laps'\r\n\r\nclass App extends Component {\r\n    intervalId = null\r\n    state = {\r\n        time: {\r\n            min: 0,\r\n            sec: 0,\r\n            mili: 0\r\n        },\r\n        laps: []\r\n    }\r\n    getStart = () => {\r\n        this.intervalId = setInterval(() => {\r\n            let min = this.state.time.min\r\n            let sec = this.state.time.sec\r\n            let mili = this.state.time.mili\r\n            if(mili >= 10) {\r\n                sec = sec + 1\r\n                mili = 0\r\n            }\r\n            if(sec >= 60) {\r\n                min = min + 1 \r\n                sec = 0\r\n            }\r\n            this.setState({time: {min, sec, mili: mili + 1}})\r\n        }, 100)\r\n    }\r\n    getPause = () => {\r\n        clearInterval(this.intervalId)\r\n    }\r\n    getLap = () => {\r\n        let time = {\r\n            ...this.state.time\r\n        }\r\n        this.setState({laps: [time, ...this.state.laps]})\r\n    }\r\n    getReset = () => {\r\n        this.setState({\r\n            time: {\r\n                min: 0,\r\n                sec: 0,\r\n                mili: 0\r\n            },\r\n            laps: []\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='container text-center py-5'>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-8 offset-sm-2\">\r\n                        <Title />\r\n                        <CountDown time={this.state.time}/>\r\n                        <Controller \r\n                            start={this.getStart}\r\n                            pause={this.getPause}\r\n                            reset={this.getReset}\r\n                            lap={this.getLap}\r\n                        />\r\n                        <Laps laps={this.state.laps}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport App from './stopwatch/app.jsx'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'))\n\nserviceWorker.unregister();"],"sourceRoot":""}